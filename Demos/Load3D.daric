Import "Library/Menu"
number_of_vertices%=0:number_of_faces%=0
vmin=1000000.0:vmax=-1000000.0:A$=""

If @Main
    Mode 1280,1024,Windowed
    Load3D()
EndIf

Def Load3D()
    MenuInit()
    Font prop
    Cls
    Camera 0,5,10,0,1,0,0,0,0
    Title("Select a 3D Model to load (Use Keyboard)")
    Label("1", "Male Head (DARIC importer)", 0)
    Label("2", "Teapot (DARIC importer)", 0)
    Label("3", "911 GT2 Rim", 0)
    Label("4", "Oak Tree", 0)
    Label("5", "Crystal" ,0)
    Label("Q", "Back to Welcome",0)
    A$=GetChar()
    Case A$ OF
        When "1":file$="Shapes/MaleHead.obj":Camera 0,0,-10,0,1,0,0,0,0
        When "2":file$="Shapes/Teapot.obj":Camera 0,0,-10,0,1,0,0,0,0
        When "3":file$="Shapes/911-gt2-rim.obj"
        When "4":file$="Shapes/Oak_Tree.obj"
        When "5":file$="Shapes/Crystal.obj"
        When "Q","q":Return
        Otherwise:Return
    EndCase

    Cls
    MenuReset()
    Title("Select a rendering type (Use Keyboard)")
    Label("1", "Solid flat shaded" ,0)
    Label("2", "Wireframe",0)
    Label("Q", "Back to Welcome",0)
    B$=GetChar()
    Case B$ OF
        When "1","2":obj%=LoadOBJFile(file$,B$)
        When "Q","q":Return
        Otherwise:Return
    EndCase
    ClearEvents

    BankedOn
    For I=0.0 To 360.0 Step 0.25
        Cls
        Rotate obj%, 0, I, 0
        Render
        Flip
		If WaitKey(0) Or AppCloseRequested() Then
            BankedOff
            DeleteObject obj%
            Return
        EndIf
    Next
    BankedOff
    DeleteObject obj%
EndDef

Def LoadOBJFile:Int(filename$:String, typ$:String)
    s1$="":s2$="":s3$="":s4$=""
    Cls

    sh=0
    Case typ$ OF
        When "2":sh=1
    EndCase

    If A$="3" Then
        obj_shape%=LoadMesh(filename$)
        obj%=Object(obj_shape%, 0, 0, 0, 0, 0, 0, 0.1, sh)
        =obj%
    EndIf
    If A$="4" Then
        obj_shape%=LoadMesh(filename$)
        obj%=Object(obj_shape%, 0, -3, 0, 0, 0, 0, 1.0, sh)
        =obj%
    EndIf
    If A$="5" Then
        obj_shape%=LoadMesh(filename$)
        obj%=Object(obj_shape%, 0, -3, 0, 0, 0, 0, 3.0, sh)
        =obj%
    EndIf
    If A$="6" Then
        obj_shape%=LoadMesh(filename$)
        obj%=Object(obj_shape%, 0, 0, 0, 0, 0, 0, 0.001, sh)
        =obj%
    EndIf

    number_of_vertices%=0
    number_of_faces%=0
    Print "Loading ";
    file%=OpenIn(filename$)
    Print filename$
    If file%=-1 Then
        Print "Can't open 3D file"
        Return
    EndIf

    REM First stage is to parse the file and work out how many vertices and faces we have
    linein$=""
    Repeat
        linein$=SGet(file%)
        ProcessOBJLine(linein$)
    Until Eof(file%)
    Print "Vertices: ";
    Print number_of_vertices%;
    Print ", Faces: ";
    Print number_of_faces%

    REM Normalise size to 1
    Print "Normalising size to 1.0...";
    linein$=""
    Seek file%,0
    Repeat
        linein$=SGet(file%)
        NormaliseSize(linein$)
    Until Eof(file%)
    Print "adjustment is ";
    Print vmin

    REM Now actually start to build our object, vertices first
    Print "Building vertices..."
    linein$=""
    Seek file%,0
    colour%=RGB(&40,&40,&80)
    If typ$="4" colour%=RGB(&20,&20,&40)
    Repeat
        linein$=SGet(file%)
        If Len(linein$) >= 1 Then
            If Left(linein$, 2) = "v " Then
                Get3OBJValues(linein$, s1$, s2$, s3$)
                x=Float(s1$) / vmax
                y=Float(s2$) / vmax
                z=Float(s3$) / vmax
	            VertexColour x, y, z, colour%
            EndIf
        EndIf
    Until Eof(file%)

    REM Now build faces
    Print "Building faces..."
    linein$=""
    Seek file%,0
    Repeat
        linein$=SGet(file%)
        If Len(linein$) >=1 Then
            If Left(linein$, 2) = "f " Then
                Get4OBJValues(linein$, s1$, s2$, s3$, s4$)
                If Len(s4$)=0 Then
                    v1%=Int(s1$)-1
                    v2%=Int(s2$)-1
                    v3%=Int(s3$)-1
	                Face v1%, v2%, v3%
                Else
                    v1%=Int(s1$)-1
                    v2%=Int(s2$)-1
                    v3%=Int(s3$)-1
                    v4%=Int(s4$)-1
	                Face v1%, v2%, v3%
	                Face v1%, v3%, v4%
                EndIf
            EndIf
        EndIf
    Until Eof(file%)
    Close file%

    REM Create shape
    Print "Creating shape..."
	obj_shape%=Shape()
	If A$="1" obj%=Object(obj_shape%, 0, 1, 0, 0, 0, 0, 1.5, sh)
	If A$="2" obj%=Object(obj_shape%, 0, -2, 0, 0, 0, 0, 3, sh)
    Return obj%
EndDef

Def ProcessOBJLine(linein$:String)
    s1$="":s2$="":s3$="":s4$=""
    If Len(linein$) < 1 Return
    Case Left(linein$, 1) OF
        When "v":number_of_vertices%=number_of_vertices%+1
        When "f":Get4OBJValues(linein$, s1$, s2$, s3$, s4$):If Len(s4$)=0 number_of_faces%=number_of_faces%+1 Else number_of_faces%=number_of_faces%+2
    EndCase
EndDef

Def Get3OBJValues(linein$:String, Ref s1$:String, Ref s2$:String, Ref s3$:String)
    p1%=Instr(linein$, " ", 1)
    p2%=Instr(linein$, " ", p1% + 1)
    p3%=Instr(linein$, " ", p2% + 1)
    p4%=Len(linein$)
    s1$=Mid(linein$,p1%+1,p2% - p1%-1)
    s2$=Mid(linein$,p2%+1,p3% - p2%-1)
    s3$=Mid(linein$,p3%+1,p4% - p3%)
EndDef

Def Get4OBJValues(linein$:String, Ref s1$:String, Ref s2$:String, Ref s3$:String, Ref s4$:String)
    p1%=Instr(linein$, " ", 1)
    p2%=Instr(linein$, " ", p1% + 1)
    p3%=Instr(linein$, " ", p2% + 1)
    p4%=Instr(linein$, " ", p3% + 1)
    p5%=Len(linein$)
    If p4%=0 p4%=p5%:p5%=0
    s1$=Mid(linein$,p1%+1,p2% - p1%-1)
    s2$=Mid(linein$,p2%+1,p3% - p2%-1)
    If p5%=0 Then 
        s3$=Mid(linein$,p3%+1,p4% - p3%)
        s4$=""
    Else 
        s3$=Mid(linein$,p3%+1,p4% - p3%-1)
        s4$=Mid(linein$,p4%+1,p5% - p4%)
    EndIf
EndDef

Def NormaliseSize(linein$:String)
    If Len(linein$) < 1 Return
    If Left(linein$, 2) <> "v " Return
    s1$="":s2$="":s3$=""
    Get3OBJValues(linein$, s1$, s2$, s3$)
    x=Float(s1$)
    y=Float(s2$)
    z=Float(s3$)
    If x < vmin vmin = x
    If y < vmin vmin = y
    If z < vmin vmin = z

    If x > vmax vmax = x
    If y > vmax vmax = y
    If z > vmax vmax = z
EndDef
