Option Base 1

' This is a comment
Rem This is a more conventional comment
#{

These are multiLine comments

}#

Const constant=100
Const ccf=12.5
Dim a1d:Int[5]
Dim a2di:Int[5,5]
Dim a2df:Float[5,5]
Dim a3d:Int[5,5,5]
Dim ta1$:String[2]
Dim ta2$:String[2, 3]

a1d[3]=123:a2di[2,3]=456:a3d[1,2,3]=789

Data        1,2,3,4,5
DataLabel   "Label"
Data        123.50,80

Record Coordinate
    x:Float
    y:Float
End Record
Record Compound
    i:Int
    f:Float
    s:String
    xy:Coordinate
End Record
Dim myrecord:Coordinate(x=12.45)
myrecord.y=100
Dim myrecordarray:Coordinate[100]
myrecordarray[10].x=123

If @Main Then
    Mode 1280,768,Windowed
    Tests
End If

Def Tests()
    Print "Daric Test Suite"
    Print "----------------"
    Print
    Print Sys "Writing to console"

    Arrays()
    Boolean()
    Chrono()
    Comparison()
    Conversion()
    Maths()
    Numbers()
    PrintFormatting()
    Strings()
    SwapVars()
    Records()
    Variables()
    TestData()
    NestedCalling()
    TestReturnInOtherwise()
    Collections()
    Functions()
    Print "All tests passed. Press a key to quit."
    GetKey()
End Def

Def Arrays
 	Print "::Arrays::"
 	SIZ%=6
 	Dim AA:Int[SIZ%]
 	AA[1] = 10
 	AA[6] = 15
 	Print "Index 1            = ";:If AA[1] = 10 Pass() Else Fail()
 	Print "Index 6            = ";:If AA[6] = 15 Pass() Else Fail()
 	a1d[2] = 321
 	Print "Global             = ";:If a1d[3] = 123 And a1d[2] = 321 Pass() Else Fail()
    a2df[3,2] = 654.1
 	Print "Global (2d)        = ";:If a2di[2,3] = 456 And a2df[3,2] = 654.1 Pass() Else Fail()
    a2df[3,2] = 650
 	Print "Global (Type conv.)= ";:If a2df[3,2] = 650 Pass() Else Fail()
 	ta1$[1] = "Test"
 	ta1$[2] = ta1$[1]
 	Print "String arrays      = ";:If ta1$[2] = "Test" Pass() Else Fail()
 	Print "Size Of 1D array   = ";:If Size ta1$ = 2 Pass() Else Fail()
    Print Size(ta2$)
 	Print "Size Of 2D array   = ";:If Size(ta2$) = 6 Pass() Else Fail()
 	ta2$[1, 1] = "Test"
 	ta2$[2, 2] = ta2$[1, 1]
 	Print "2D arrays          = ";:If ta2$[2, 2] = "Test" Pass() Else Fail()
 	Print
End Def

Def Boolean
    Print "::Boolean::"
    Print "Or                 = ";:If ((&F0 OR &F0) = &F0) And ((&F0 OR &0F) = &FF) Pass() Else Fail()
    Print "Eor                = ";:If ((1 Eor 1) = 0) And ((1 Eor 0) = 1) And ((0 Eor 0) = 0) Pass() Else Fail()
    Print "And                = ";:If ((&F0 And &F0) = &F0) And ((&F0 And &0F) = &0) Pass() Else Fail()
    Print "Not                = ";:If Not 1 = 0 Pass() Else Fail()
    Print "Complement         = ";:If ~1 = -2 Pass() Else Fail()
    Print "True               = ";:If True Pass() Else Fail()
    Print "False              = ";:If Not False Pass() Else Fail()
    Print
End Def

Def Comparison
    Print "::Comparison::"
    Print "Min =              = ";:If Min(2,5)=2 Pass() Else Fail()
    Print "Max =              = ";:If Max(2,5)=5 Pass() Else Fail()
    Print "Int =              = ";:If 5 = 5 Pass() Else Fail()
    Print "Int <>             = ";:If 5 <> 6 Pass() Else Fail()
    Print "Int <              = ";:If 5 < 10 Pass() Else Fail()
    Print "Int <= (<)         = ";:If 4 <= 5 Pass() Else Fail()
    Print "Int <= (=)         = ";:If 5 <= 5 Pass() Else Fail()
    Print "Int >              = ";:If 10 > 5 Pass() Else Fail()
    Print "Int >= (>)         = ";:If 10 >= 5 Pass() Else Fail()
    Print "Int >= (>=)        = ";:If 5 >= 5 Pass() Else Fail()
    Print "Float =            = ";:If 5.0 = 5.0 Pass() Else Fail()
    Print "Float <>           = ";:If 5.0 <> 6.0 Pass() Else Fail()
    Print "Float <            = ";:If 5.0 < 10.0 Pass() Else Fail()
    Print "Float <= (<)       = ";:If 4.0 <= 5.0 Pass() Else Fail()
    Print "Float <= (=)       = ";:If 5.0 <= 5.0 Pass() Else Fail()
    Print "Float >            = ";:If 10.0 > 5.0 Pass() Else Fail()
    Print "Float >= (>)       = ";:If 10.0 >= 5.0 Pass() Else Fail()
    Print "Float >= (>=)      = ";:If 5.0 >= 5.0 Pass() Else Fail()
    Print "String =           = ";:If "Fred" = "Fred" Pass() Else Fail()
    Print "String <>          = ";:If "Fred" <> "fred" Pass() Else Fail()
    Print "String <           = ";:If "Fred" < "fred" Pass() Else Fail()
    Print "String <= (<)      = ";:If "Fred" <= "fred" Pass() Else Fail()
    Print "String <= (=)      = ";:If "Fred" <= "Fred" Pass() Else Fail()
    Print "String >           = ";:If "fred" > "Fred" Pass() Else Fail()
    Print "String >= (>)      = ";:If "fred" >= "Fred" Pass() Else Fail()
    Print "String >= (>=)     = ";:If "Fred" >= "Fred" Pass() Else Fail()
    Print
End Def

Def Conversion
    Print "::Conversion::"
    Print "10 + 15.5          = ";:If 10 + 15.5 = 25.5 Pass() Else Fail()
    Print
End Def

Def Maths
    Print "::Maths::"
    Print "- (Unary)          = ";:If 2 - -2 = 4 Pass() Else Fail()
    A=2:Print "- (Unary Var)      = ";:If -A = -2 Pass() Else Fail()
    Print "- (Int)            = ";:If 10 - 8 = 2 Pass() Else Fail()
    Print "+ (Int)            = ";:If 10 + 8 = 18 Pass() Else Fail()
    Print "* (Int)            = ";:If 10 * 8 = 80 Pass() Else Fail()
    Print "^ (Int)            = ";:If 2 ^ 3 = 8 Pass() Else Fail()
    Print "Mod (Int)          = ";:If 11 Mod 5 = 1 Pass() Else Fail()
    Print "Div (Int)          = ";:If 11 Div 5 = 2 Pass() Else Fail()
    Print "Abs (Int)          = ";:If Abs(-10) = 10 Pass() Else Fail()
    Print "- (Float)          = ";:If 10.5 - 8.25 = 2.25 Pass() Else Fail()
    Print "+ (Float)          = ";:If 10.4 + 8.1 = 18.5 Pass() Else Fail()
    Print "* (Float)          = ";:If 2.5 * 4.5 = 11.25 Pass() Else Fail()
    Print "/ (Float)          = ";:If 8.4 / 4.2 = 2.0 Pass() Else Fail()
    Print "Floor              = ";:If Floor(12.8) = 12.0 Pass() Else Fail()
    Print "Round              = ";:If Round(12.8) = 13.0 Pass() Else Fail()
    Print "Ln                 = ";:If Int(Ln(16) * 100.0) = 277 Pass() Else Fail()
    Print "Log                = ";:If Int(Log(16) * 100.0) = 120 Pass() Else Fail()
    Print "Exp                = ";:If Int(Exp(1) * 100.0) = 271 Pass() Else Fail()
    Print "Atn                = ";:If Int(Atn(3) * 100.0) = 124 Pass() Else Fail()
    Print "Tan                = ";:If Int(Tan(3) * 100.0) = -14 Pass() Else Fail()
    Print "Sin                = ";:If Int(Sin(3) * 100.0) = 14 Pass() Else Fail()
    Print "Cos                = ";:If Int(Cos(3) * 100.0) = -98 Pass() Else Fail()
    Print "Acs                = ";:If Int(Acs(0.5) * 100.0) = 104 Pass() Else Fail()
    Print "Asn                = ";:If Int(Asn(0.5) * 100.0) = 52 Pass() Else Fail()
    Print "Rad                = ";:If Int(Rad(90) * 100.0) = 157 Pass() Else Fail()
    Print "Deg                = ";:If Int(Deg(1.5)) = 85 Pass() Else Fail()
    Print "Pi                 = ";:If Int(Pi*100) = 314 Pass() Else Fail()
    Print "Sgn (-)            = ";:If Sgn(-10) = -1 Pass() Else Fail()
    Print "Sgn                = ";:If Sgn(0) = 0 Pass() Else Fail()
    Print "Sgn (+)            = ";:If Sgn(10) = 1 Pass() Else Fail()
    Print "Precedence         = ";:If 2+3*4 = 14 Pass() Else Fail()
    Print "Parentheses        = ";:If (2+3)*4 = 20 Pass() Else Fail()
    Print
End Def

Def NestedCalling
	Print "::Nested Calling::"
    Nested1()
    Return
End Def

Def Nested1
    Nested2()
    Return
End Def

Def Nested2
    Print "Nested DEFs        = ";:Pass()
End Def

Def Numbers
    Print "::Numbers::"
    Print "Hex                = ";:If &40 = 64 Pass() Else Fail()
    Print "Binary             = ";:If %100 = 4 Pass() Else Fail()
    Print
End Def

Def RetValues
    Print "::Other::"
    Print "Returning Int      = ";:If RetInteger(10)=110 Pass() Else Fail()
    Print "Returning Float    = ";:If RetFloat()=146.45 Pass() Else Fail()
    Print "Returning String   = ";:If RetString()="ff" Pass() Else Fail()
    Print
End Def

Def RetInteger:Int(x)
	Return x+100
End Def

Def RetFloat:Float
	Return 146.45
End Def

Def RetString:String
	Return "ff"
End Def

Def Empty
End Def

Def PrintFormatting
    Print "::Print Formatting::"
    Print Sys 123.456 With "[[%9.6f]]"
    Print Sys "Hello, world!" "Test: %s": Rem Optional WITH
    Print
End Def

Def Strings
    Print "::Strings::"
    Print "Asc                = ";:If Asc("Fred") = 70 And Asc("") = -1 Pass() Else Fail()
    Print "Chr                = ";:If Chr(65) = "A" Pass() Else Fail()
    Print "Instr              = ";:If Instr("Test this this String", "this", 1) = 6 Pass() Else Fail()
    Print "Instr (with start) = ";:If Instr("Test this this String", "this", 8) = 11 Pass() Else Fail()
    Print "Left               = ";:If Left("A test String", 6) = "A test" Pass() Else Fail()
    Print "Mid                = ";:If Mid("A test String", 3, 4) = "test" Pass() Else Fail()
    Print "Right              = ";:If Right("A test String", 6) = "String" Pass() Else Fail()
    Print "Len                = ";:If Len("A test String") = 13 Pass() Else Fail()
    Print "Len                = ";:If Len("Â£a") = 2 Pass() Else Fail()
    Print "String to Float    = ";:If Float("10.5") = 10.5 Pass() Else Fail()
    Print "Float to String    = ";:If String(10.5) = "10.500000" Pass() Else Fail()
    Print "Float to formatted = ";:If String(10.5 With "[[%9.6f]]") = "[[10.500000]]" Pass() Else Fail()
    Print
End Def

Def SwapVars
	Print "::Swap::"
	swpa=1:swpb=2
	swpf1=123.2:swpf2=456.2
	swps1$="11":swps2$:String="22"
	Swap swpa,swpb
	Swap swpf1,swpf2
	Swap swps1$,swps2$
	Swap myrecord.y, myrecord.x
	Print "Swap Integer       = ";:If swpa=2 And swpb=1 Pass() Else Fail()
	Print "Swap Float         = ";:If swpf1=456.2 And swpf2=123.2 Pass() Else Fail()
	Print "Swap String        = ";:If swps1$="22" And swps2$="11" Pass() Else Fail()
	Print
End Def

Def Variables()
    A%=0:F=10:G=0
    B#:Float=0:C=123.45:H:Float=0
    D$="":E:String="Test"
 	G=100
 	Let H=99.9

    Print "::Variables::"
    Print "Local Integer (0)  = ";:If A%=0 Pass() Else Fail()
    Print "Local Float (0)    = ";:If B#=0.0 Pass() Else Fail()
    Print "Local String (BLnk)= ";:If D$="" Pass() Else Fail()
    Print "Local Integer      = ";:If F=10 Pass() Else Fail()
    Print "Local Float        = ";:If C=123.45 Pass() Else Fail()
    Print "Local String       = ";:If E="Test" Pass() Else Fail()
    Print "constants          = ";:If constant=100 And ccf=12.5 Pass() Else Fail()
    Print "Implicit LET       = ";:If G=100 Pass() Else Fail()
    Print "Explicit LET       = ";:If H=99.9 Pass() Else Fail()
 	Print
End Def

Def Chrono
	Print "::Chrono::"
	Print "Timer              = ";:If Timer() >= 0 Pass() Else Fail()
	Print "Time               = ";:If Len(Time()) > 0 Pass() Else Fail()
	Print "Date               = ";:If Len(Date()) > 0 Pass() Else Fail()
	Print
End Def

Def SendParameter(  A:Int,
                    B:Float,
                    C$:String)
	Print "Send parameter%    = ";:If A = 25 Pass() Else Fail()
	Print "Send parameter#    = ";:If B = 123.1 Pass() Else Fail()
	Print "Send parameter$    = ";:If C$ = "Test" Pass() Else Fail()
End Def

Def Functions
	Print "::Functions::"
	RetValues()
 	SendParameter(15+10,123.1,"Test")
    AA=100:B="Old value"
    Dim AB:Int[10]
    RefInt(AA)
	Print "Int by reference   = ";:If AA = 250 Pass() Else Fail()
    RefInt(AB[5])
	Print "Int by ref. array  = ";:If AB[5] = 250 Pass() Else Fail()
    RefInt(a1d[5])
	Print "Int by g.ref. array= ";:If a1d[5] = 250 Pass() Else Fail()
    RefString(B)
	Print "String by ref.     = ";:If B = "New value" Pass() Else Fail()
    Dim locrec:Coordinate(x=12.456)
    TestRec(locrec) 
	Print "Record by ref.     = ";:If locrec.y = 111.22 Pass() Else Fail()
    TestRecNested1(locrec)
	Print "Record by ref. nest= ";:If locrec.y = 333.22 Pass() Else Fail()

    Dim locarray:Coordinate[5]
    TestRecArray(locarray[2])
	Print "Record by ref. arr = ";:If locarray[2].y = 222.44 Pass() Else Fail()
	Print
End Def

Def TestRecArray(ByRef A:Coordinate)
    A.y = 222.44
End Def

Def RefInt(ByRef A:Int)
    A=500
    RefIntNested(A)
End Def

Def RefIntNested(ByRef A:Int)
    A=250
End Def

Def RefString(ByRef A:String)
    RefStringNested(A)
End Def

Def RefStringNested(ByRef A:String)
    A="New value"
End Def

Def TestRec(ByRef A:Coordinate)
    A.y = 111.22
End Def

Def TestRecNested1(ByRef A:Coordinate)
    TestRecNested2(A)
End Def

Def TestRecNested2(ByRef A:Coordinate)
    A.y = 333.22
End Def

Def Records
	Print "::Records::"
    Dim myrecordl:Compound(i=101,f=123.45,s="test")
    myrecordl.xy.y=165.32
    Dim myrecordarray2:Coordinate[10]
    myrecordarray2[5].y=345
 	Print "Load field (1)     = ";: If myrecordl.i=101 And myrecordl.f=123.45 And myrecordl.s="test" Pass() Else Fail()
	Print "Load field (2)     = ";: If myrecordl.xy.y=165.32 Pass() Else Fail()
	Print "Load field (3)     = ";: If myrecord.y=12.45 And myrecord.x=100.0 Pass() Else Fail(): Rem Swapped earlier
	Print "Load field (4)     = ";: If myrecordarray[10].x=123 Pass() Else Fail()
	Print "Load field (5)     = ";: If myrecordarray2[5].y=345 Pass() Else Fail()
	Print "Size Of type array = ";: If Size(myrecordarray2) = 10 Pass() Else Fail()
	Print
End Def

Def Looping
	Print "::Looping::"
	Print "One Line If        = ";:If 1 = 1 Pass() Else Fail()
	Print "MultiLine If       = ";
	If 1 = 1 Then
		Pass()
	Else
		Fail()
	End If

	I% = 0
	Repeat
		I% = I% + 1
	Until I% = 10
	Print "Repeat             = ";:If I% = 10 Pass() Else Fail()

	I% = 0
	While I% < 10
		I% = I% + 1
	End While
	Print "While              = ";:If I% = 10 Pass() Else Fail()

	I% = 0
	For J% = 1 To 1
        Print "A"
		I% = I% + 1
    Next
	Print "For (Int/1 Iter)   = ";:If I% = 1 Pass() Else Fail()

	I% = 0
	For J% = 0 To 9
		I% = I% + 1
	Next
	Print "For (Int)          = ";:If I% = 10 Pass() Else Fail()

	I% = 0
	For J% = 0 To 11 Step 2
		I% = I% + 1
	Next
	Print "For + Step (Int)   = ";:If I% = 6 Pass() Else Fail()

	I% = 0
	For J% = 9 To 0 Step -1
		I% = I% + 1
	Next
	Print "For - (Int)        = ";:If I% = 10 Pass() Else Fail()

	I% = 0
	For J# = 0.0 To 9.0
		I% = I% + 1
	Next
	Print "For (Float)        = ";:If I% = 10 Pass() Else Fail()

	I% = 0
	For J# = 0.0 To 10.0 Step 2.0
		I% = I% + 1
	Next
	Print "For + Step (Float) = ";:If I% = 6 Pass() Else Fail()

	I%=0
	For N=0 To 9
        For M=0 To 9
        I%=I%+1
        Next
    Next
	Print "Nested For         = ";:If I% = 100 Pass() Else Fail()

	Print "Case               = ";
	I%=1
	Case I% Of
		When 0, 1, 2: Pass()
		When 3: Fail()
		Otherwise Fail()
	End Case

	Print "Case (Not first)   = ";
	I%=2
	Case I% Of
		When 0,1: Fail()
		When 2: Pass()
		Otherwise Fail()
	End Case

	Print "Case (Otherwise)   = ";
	I%=4
	Case I% Of
		When 0, 1, 2: Fail()
		When 3: Fail()
		Otherwise Pass()
	End Case

	Print "Case (String)      = ";
	A$="B"
    Case A$ Of
 		When "A":Fail()
	 	When "B":Pass()
		Otherwise Fail()
	End Case
    Print
End Def

Def TestData
	Print "::Data::"
	Read a1,a2,a3
	Print "Data (Int)         = ";:If a1=1 And a2=2 And a3=3 Pass() Else Fail()
	Restore "Label"
	ReadF f1
    b1:Byte=0
    ReadB b1
	Print "DataLabel          = ";:If f1=123.50 And b1=80 Pass() Else Fail()
	Print
End Def

Def TestReturnInOtherwise
    B$="5"
	Print "Return inside Def  = ";:
    Case B$ Of
        When "1","2","3","4":Fail()
        Otherwise:Pass():Print:Return
    End Case
	Fail()
End Def

Def Collections()
	Print "::Collections::"
    Dim a1:List[Coordinate]
    Dim b1:Queue[Int]
    Dim c1:Stack[String]
    Dim d1:Set[Int]
    Dim e1:Map[String,Coordinate]
    Dim f1:Vector[Int]

    ' Sizes
    Print "Size (List)        = ";:If Size(a1)=0 Pass() Else Fail()
    Print "Size (Queue)       = ";:If Size(b1)=0 Pass() Else Fail()
    Print "Size (Stack)       = ";:If Size(c1)=0 Pass() Else Fail()
    Print "Size (Set)         = ";:If Size(d1)=0 Pass() Else Fail()
    Print "Size (Map)         = ";:If Size(e1)=0 Pass() Else Fail()
    Print "Size (Vector)      = ";:If Size(f1)=0 Pass() Else Fail()

    ' List
    Add a1,Dim Coordinate(x=10,y=20)
    Dim bh:Coordinate(x=12)
    bh.y=100.50
    Add a1, bh
    Get a1[2],bhi 
    PassByList(a1)
    Print "Push+Pop (List)    = ";:If bhi.x=12 And Size(a1)=3 Pass() Else Fail()

    ' Queue
    Dim yyy:Int[3]
    yyy[2] = 100
    Add b1, yyy[2]
    Take b1,bb1
    Print "Push+Pop (Queue)   = ";:If bb1=100 And Size(b1)=0 Pass() Else Fail()

    ' Stack
    Add c1,"Hi"+"Hi"
    Print "Push+Pop (Stack)   = ";:If c1="HiHi" And Size(c1)=0 Pass() Else Fail()

    ' Vector
    For I=1 To 10
        Add f1, I
    Next
    Print "Place/Size (Vector)= ";:If Size(f1)=10 Pass() Else Fail()
    xb=f1[5]
    Print "Take (Vector)      = ";:If xb=5 Pass() Else Fail()

    ' Remove entry from vector
    Drop f1[5]
    Print "Clear (Vector)     = ";:If Size(f1)=9 Pass() Else Fail()

    ' Set
    Add d1,10
    Add d1,10
    Add d1,15
    Print "Has (Set+)         = ";:If d1[10]=1 Pass() Else Fail()
    Print "Has (Set-)         = ";:If d1[20]=0 Pass() Else Fail()
    Print "Ints (Set)         = ";:If Size(d1)=2 Pass() Else Fail()
    Drop d1[10]
    Drop d1[15]
    Print "Clear (Set)        = ";:If Size(d1)=0 Pass() Else Fail()
    
    ' Map
    Dim mm:Coordinate()
    mm.x=10
    mm.y=100.0
    Add e1["Hello"],mm
    Get e1["Hello"],bhh2
    Print "Map                = ";:If bhh2.x=10 And bhh2.y=100.0 Pass() Else Fail()
    Print "Has (Map+)         = ";:If e1["Hello"]=1 Pass() Else Fail()
    Print "Has (Map-)         = ";:If e1["Hell"]=0 Pass() Else Fail()
    Drop e1["Hello"]
    Print "Clear (Map)        = ";:If Size(e1)=0 Pass() Else Fail()

    ' Clear
    Clear f1
    Print "Clear              = ";:If Size(f1)=0 Pass() Else Fail()
    Print
End Def

Def PassByList(ByRef x:List[Coordinate])
    PassByListNest(x)
End Def

Def PassByListNest(ByRef x:List[Coordinate])
    Add x,Dim Coordinate(x=50,y=70)
End Def

Def Pass()
    Print "PASS!"
End Def

Def Fail()
    Print "!! FAILED TEST !!"
    GetChar
    Quit
End Def


